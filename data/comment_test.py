# !/opt/python37/bin/python3
# !/usr/bin/env python
# _*_ coding:utf-8 _*_
import json
import re
import random


def number(x):
    if isinstance(x, int):
        price = random.randint(0, x)
    elif isinstance(x, list):
        num = random.randint(0, len(x) - 1)
        price = x[num]
    elif isinstance(x, dict):
        num = random.randint(0, len(x) - 1)
        price = x[num]
    else:
        print('输入类型或长度错误')
        price = "error: 输入类型或长度错误"
    return price


class comment:
    def type_1(self):
        # 作家
        a = ["宁就是带文学家？", "伟大的灵魂就像高耸的山峰", "读书使人充实，思考使人深邃，交谈使人清醒", "语言是心灵跟文化教育的反映", "当一个作家深切的感到自己和人民血肉联系的时候，就会给他以美和力量",
             "岁月的河流缓缓流过，成长的足迹深深留下，蓦然回首，长大的路上留下一串串或深或浅的脚印，记载着欢乐，记载着忧伤，伴随我一路走来。", "青年长于创造而缺乏思考，长于猛干而短于讨论，长于革新而短于持重",
             "一分钟的思考抵上一小时的唠叨，而此文让我思考了很久", "学习很多东西的诀窍在于——不要一下子学很多东西", "书房是文人精神的巢穴，生命的禅堂", "知识上的富有可以享受心灵上的满足",
             "优秀人物的错误，就在于获得世人的赏识而浪费青春", "既要敢于突破陈规，又要放开手脚打破条条框框", "好久没有静下来享受获得知识的感觉了", "高尚的语言包含着真诚的动机",
             "学习知识要善于思考、思考、再思考", "真佩服，满腹经纶，这果然是奥妙", "一个人的度量是一种精神力量，是一股强大的文明力量", "如果知识不是每天在增加，就会不断地减少",
             "在战斗中获得勇敢，在学习中获得知识", "旋转幽婉，诗意抒情。点点凝聚在字里行间；涓涓流水，群鸟随云；任其诗意徘徊，经久难散", "品一篇美文，仿佛品一壶千载的醇酒；丝丝的辛辣蕴藏着言不尽的甜蜜",
             "语言真是一门学问，如果我们会用欣赏的眼光去看待别人，自然会发现别人身上的闪光点，用智慧的美言与别人交谈，那我们的人际关系就会更加和谐，更加美好。", "不愧有大家风范", "两个字，到位", "名家风范",
             "取众家所长", "受教了", "精神乃至灵魂的共鸣", "让我美餐了一顿", "您的文章让我感受到片刻的宁静", "舒适度很重要，此文便是", "有内涵的文章才是好文章", "视野又开阔了",
             "百家争鸣，旗鼓相当", "当代缺的就是这种智慧与豁达", "诗情画意，回味无穷", "好文章首先要有好意境，然后才是好文字", "世事洞明皆学问，人情练达即文章",
             "伟大的作品不只是靠力量完成，更是靠坚定不移的信念", "最枯燥无味的作品也无法抵挡批评家找出它迷人之处的决心", "天才的作品是用眼泪灌溉的", "优秀的作品无论你怎样去探测它，都是探不到底的",
             "总感觉作家的世界离我好远又好近", "请问老师，如何写作呢？"]
        return a

    def type_2(self):
        # 出版/媒体人
        a = ["宁就是带文学家？", "伟大的灵魂就像高耸的山峰", "读书使人充实，思考使人深邃，交谈使人清醒", "语言是心灵跟文化教育的反映", "当一个作家深切的感到自己和人民血肉联系的时候，就会给他以美和力量",
             "岁月的河流缓缓流过，成长的足迹深深留下，蓦然回首，长大的路上留下一串串或深或浅的脚印，记载着欢乐，记载着忧伤，伴随我一路走来。", "青年长于创造而缺乏思考，长于猛干而短于讨论，长于革新而短于持重",
             "一分钟的思考抵上一小时的唠叨，而此文让我思考了很久", "学习很多东西的诀窍在于——不要一下子学很多东西", "书房是文人精神的巢穴，生命的禅堂", "知识上的富有可以享受心灵上的满足",
             "优秀人物的错误，就在于获得世人的赏识而浪费青春", "既要敢于突破陈规，又要放开手脚打破条条框框", "好久没有静下来享受获得知识的感觉了", "高尚的语言包含着真诚的动机",
             "学习知识要善于思考、思考、再思考", "真佩服，满腹经纶，这果然是奥妙", "一个人的度量是一种精神力量，是一股强大的文明力量", "如果知识不是每天在增加，就会不断地减少",
             "在战斗中获得勇敢，在学习中获得知识", "旋转幽婉，诗意抒情。点点凝聚在字里行间；涓涓流水，群鸟随云；任其诗意徘徊，经久难散", "品一篇美文，仿佛品一壶千载的醇酒；丝丝的辛辣蕴藏着言不尽的甜蜜",
             "语言真是一门学问，如果我们会用欣赏的眼光去看待别人，自然会发现别人身上的闪光点，用智慧的美言与别人交谈，那我们的人际关系就会更加和谐，更加美好。", "不愧有大家风范", "两个字，到位"]
        return a

    def type_3(self):
        # 商界名人
        a = ["视野开阔了 ", "真棒，非常到位 ", "真的专业，学习了 ", "受益匪浅 ", "没有商业经验，还是比较难懂的 ", "早几年读过就不会遇到那么多坑了！ ", "不愧是大佬，思路真的清晰 ",
             "商业思维是真的有魅力，赞 ", "把时间留给重要的几个人，是成年人学的第一课 ", "商场如战场 ", "请教大佬，如何成为一个合格的商人！ ",
             "商场逻辑其实比情场逻辑要简单的多，因为情场没有逻辑，哈哈哈 ", "U1S1，我想创业，求大佬投我一票！ ", "请问您还收儿子吗 ", "让人展开格局的好文章", "开拓视野", "非常不错，我喜欢",
             "如此到位的理解，很棒", "大师，我悟了！", "纸上谈兵而已", "商业的本质是交易，交易的本质是诚意", "思路清晰明白，感谢传授", "所谓的商业思维究竟是什么呢？", "稳定的社会是商业的基础",
             "曲高和寡，切勿陷得太深", "商业的存在除了创造繁荣和就业，最大的作用是服务人类的需要", "精明的商人只有嗅觉敏锐才能将商业情报发挥到极致", "充满商业细胞的商人，赚钱无所不在，无处不在",
             "在商业社会，越让人知道你饥饿，越找不到食物", "有种黑暗森林的感觉", "如果从商业利益的角度去看待一些事情，答案其实很简单", "我们只愿意相信那些我们愿意相信的事情"]
        return a

    def type_4(self):
        # 艺术家
        a = ["艺术是人类伟大的灵魂！只有艺术共同生活，生活才会变得多姿多彩！", "只有想才会产生美。只有美才会产生想", "品味是一种过程，是一种探索；是一种提升，是一种享受",
             "艺术离我们并不遥远，它就在你我身边。它可以是一首歌，一幅画，也可以是一件不起眼的小堡艺品。", "那些美得让人无法自拔的艺术品，往往来自于生活中被人忽略的那些细节",
             "艺术家观察无形，倾听无声，重新整理并把它们肃清，留下痕迹，让生活和生命获得第二生命。", "艺术源于生活，高于生活",
             "“艺术”这个词，乍一听起来好象离我们很远。总以为它是属于艺术家们的，是高雅者的研究对象，很难与我们这些寻常百姓套上近乎。可是，如果你真的留意一下生活，那些艺术，其实无处不在地存在于我们周围。",
             "艺术是一曲华章，突破苍穹的束；艺术是一幅水墨，点染无尽的山水；艺术是一支舞曲，恢弘青春之彩。", "艺术在常总是十分高雅而不可及的，其实它可以是一首歌一次展览一段经历……有艺术的生活就有欢乐，就有美。",
             "太高雅了，欣赏不来", "没这种欣赏艺术的脑子", "这就是艺术啊？第一次进城，不敢说话~",
             "高超的艺术能给人美的享受，能震憾人的心灵，但是，要想具有精湛的艺术，是要付出很大的代价的。它需要浓厚的兴趣，坚强的毅力，不懈的追求。",
             "有了艺术，生活才有美，有了生活，也才有艺术。生活处处都是艺术，不需要刻意发现。自然产生美，自然才有艺术。", "艺术人生！", "真的很棒，太美了！", "从另一个视角向往艺术的美丽。",
             "学会微笑是生活的艺术", "艺术属于古老的世界，科学属于现代的世界", "艺术和科学的价值在于没有私欲的服务，在于为万人的利益服务", "只有艺术和科学能提高人，达到神圣的高度",
             "艺术家一开始好像都是业余爱好者", "杰出的艺术家怀有的任何心思，都有本事透过一块大理石表现无遗", "一个真正的艺术家不应当只是一位画家，应该是兴趣广泛的多面手", "缺乏热情的艺术家好似没有颜料的画家",
             "艺术家最大的品质就是冲动", "感觉所谓的艺术家，好像就是在许多领域都去得过某些成就的人", "艺术家这个身份界限还是很模糊的", "提及艺术二字就会自然的有种抽象的感觉，这便是艺术的魅力之一吧",
             "真正的艺术品包含着自己的美学理论，并提出了让人们藉以判断其优劣的标准", "艺术没有终点，只有起点"]
        return a

    def type_5(self):
        # 学者/教授
        a = ["特别喜欢老师的文章", "学习的原动力就是好奇心", "兴趣是最好的老师", "现在很多人不是失去了学习的动力，而是失去了好奇心", "吃不了学习的苦，就要吃生活的苦", "温故而知新",
             "果真是有大学问之人", "很好奇先生的书房是怎样的",
             "好学而不勤问非真好学者", "好议论人之长短，是学者大病", "学者有自立之志，当拔出流俗，不可泛泛与世浮沉。",
             "检验真理的工作也没有被过去某一个时代的一批学者一劳永逸地完成；真理必须通过它在各个时代受到的反对和打击被人重新发展", "含蓄幽默，耐人寻味", "师者所以传道，授业，解惑也",
             "学者们往往有一种触类旁通的本领", "古人告诉我们学习是需要吃苦的，所以学者们让我敬佩", "在任何时代，学习的根源就是好奇心，所以请保持你的好奇心吧",
             "当代人学习的动力，来源于焦虑，如果没有焦虑，你还会学习么？至少我不会"]
        return a

    def type_6(self):
        # 公益大使
        a = ["散播爱心，传递爱", "内心有爱，无所畏惧", "善待每一个身边的人，平静的面对纷扰的世界", "每一个做公益的人，都有一颗炽热的心", "公益活动真的特别感谢志愿者", "先要爱自己，才能爱别人",
             "关心公益，应当是每个有相当教养的人所共同的。", "能真正去踏踏实实做公益的人真的是太少了", "从整体社会的角度来看，公益这件事更像是润滑剂", "伏尔泰曾说过：为公益做出最大牺牲的人，都是最有道德的人",
             "公益这件事就是牺牲小我，成就大我", "用爱心来做事，用感恩的心做人", "道德能弥补智慧的缺陷，爱心能开启心灵的天空", "在公益这件事上，别说，去做",
             "愿中国青年摆脱冷气，只向上走", "不必听自暴自弃者流的话", "能做事的做事，能发声的发声", "有一分热，发一分光。", "公益事业一直温暖着人们的心房", "支持公益就是在帮助我们自己",
             "因为有人性，所以有公益",
             "公益事业的成功就是考验人性善良的那面", "每一个热衷于公益事业的人，内心都有着无私的大爱", "爱自己很容易，爱亲人很容易，爱陌生人很难"]
        return a

    def type_7(self):
        # 体育名人
        a = ["台上一分钟，台下十年功", "体育真的是青春饭", "运动员一般浑身都是伤病", "强大的身体还拥有美好的灵魂", "坚持才是胜利", "身边有很多人选体育这条路，有成就的凤毛麟角",
             "体育之美，源于坚持与毅力", "锲而舍之，朽木不折，锲而不舍，金石可镂", "身体教育与知识教育必须要保持平衡", "体育就是力量与智慧的结合", "特别喜欢体育运动之后浑身冒汗的感觉",
             "运动是一个非常好的解压方式", "管住嘴，迈开腿", "我现在就出去跑步~", "不是每一位运动员都配称为运动员", "我们只看到了赛场上的英勇身姿，看不到的是超越常人的辛苦付出",
             "体育运动员可能就是那种天赋比你好，而且还比你努力的人吧", "欲望以提升热忱，毅力以磨平高山", "相信坚持的力量",
             "如果能追随理想而生活，本着正直自由的精神，勇往直前的毅力，诚实而不自欺的思想而行，则定能臻于至善至美的境地"]
        return a

    def type_8(self):
        # 华语辩手
        a = ["善辩的天赋是一种把智者仅仅思考的思想说出来的才能  ", "沟通是人类进步的阶梯  ", "一直想不明白，才思敏捷到底是形容什么人的，直到我看了看镜子  ",
             "如果说思维是一架飞机的翅膀，那么口才就是帮助飞机起飞的发动机  ", "真的精彩，这种思维太超前了  ", "看来要学会自己跟自己吵架了  ", "唇枪舌剑，好不精彩  ",
             "再动情的表述也埋没不了真理的光辉  ", "这个年代，光会做可不行，还要会说  ", "以前形容一个人能说会道，都暗含贬义跟嫉妒，如今也如此  ", "才思敏捷说不定不是优势，只是对手太过于笨拙  ",
             "父母那个年代，玩命干活就是好，而现在能说会道才叫棒  ", "辩论更多与思维活跃有关，像我这种脑子可真玩不转  ", "膜拜大佬，这脑子要多活跃才能这么快速的思考  ", "I 服了 YOU，给大佬跪下了",
             "能言善辩，又不信口雌黄", "引经据典，说的在理", "文思如泉涌", "思想是巨人，行动别是矮子", "敏捷的思维是一种优势，但没那么重要", "善用辩论的思维，恪守生活的情操", "说实话挺一般的",
             "超出预期，比想象中的要好很多", "不愧是辩论高手，引经据典", "引经据典，信手拈来", "腹有诗书气自华", "感觉辩论高手的记忆力都特别强", "很好奇平常是通过什么方式练习的，对着镜子吗？",
             "感觉辩论跟嘴快不是必然的，跟脑子快才是必然的", "估计到后期，说话不需要过脑子了，因为咀嚼肌有记忆了~", "什么时候还有辩论赛啊，我想看", "深厚的文字功底才能撑起炫技一般的语言",
             "思维高度决定人生的宽度", "如果能现场看一场辩论该有多好", "读书使人渊博，辩论使人机敏"]
        return a

    def type_9(self):
        # 医学
        a = ["医者仁心  ", "涨知识啦  ", "原来医学是这么简单的一件事  ", "浅显易懂，深入简出  ", "今天又学到了！  ", "太实用啦  ", "为家里人学一学  ", "每天学一点，幸福全家人  ",
             "太棒了，快让我爱上医学了  ", "谢谢老师耐心的分享与解读  ", "感觉还是没有完全理解  ", "医学知识太神奇啦  ", "期待下次的分享  ", "突然想学医了  ",
             "看似浅显易懂，实际太多沉淀啦"]
        return a

    def type_10(self):
        # 科普科幻
        a = ["迷人的想象力", "想象力是人类最宝贵的财富之一", "遨游在另一个美好的世界", "人类进步的阶梯就是想象力", "如果不敢想，何来进步", "对100年前的人来说，我们现在的生活就是科幻",
             "如果这都叫科幻，那我也行", "遇事不决，量子力学", "牛顿：科幻领域不归我管", "科幻，某种程度上是对已经变为泡影的理想的一种精神补偿。", "看了那么多的太空人科幻影片，发觉自己也有点想入非非",
             "科幻小说把我们带进了一个奇妙的世界", "科幻小说有许多种，有些确实在进行社会思考或隐喻现实", "想象力比知识更重要", "科学最伟大的进步是由崭新的大胆的想象力所带来的",
             "心灵与自然相结合才能产生智慧，才能产生想象力", "有想象力而没有鉴别力是世上最可怕的事", "人类的所有成就都源于创造性幻想。那么我们没有权利轻视想象力", "提出一个问题往往比解决一个问题更重要",
             "在事实面前，我们的想象力越发达，后果就越不堪设想"]
        return a

    def type(self):
        # 通用评论
        a = ["是啊", "赞一个", "做的不错呦", "溜了溜了", "顶住顶住", "精辟", "哈哈哈，真实", "让我想起了自己的经历！", "棒！火钳刘明", "老铁稳",
             "看破不说破", "逐渐上头😂", "前排", "红红火火恍恍惚惚", "我裂开了", "嘻嘻🤭", "🙂",
             "涨知识了", "太赞了", "真的好看", "学习了", "666", "太秀了", "很有意义", "棒极了", "思维值得学习", "还是需要理解能力的", "???"]
        return a

    def type1(self):
        b = ['！', '.', '…']
        return b

    def type2(self):
        c = ['🙈', '🙊', '🐵', '🐒', '🐶', '🐕', '🐩', '🐺', '🐱', '😺', '😸', '😹',
             '😾', '🐈', '🐯', '🐅', '🐆', '🐎', '🐮', '🐂', '🐃', '🐄', '🐷', '🐗', '🐽', '🐏', '🐑', '🐐',
             '🐪', '🐫', '🐘', '🐭', '🐁', '🐀', '🐹', '🐰', '🐇', '🐻', '🐼', '🐾', '🐔', '🐓', '🐣',
             '🐦', '🐧', '🐍', '🐲', '🐉', '🐳', '🐋', '🐬', '🐟', '🐠', '🐡', '🐙', '🐚', '🐌', '🐛',
             '💪', '👆', '👇', '✋', '👌', '👍', '👎', '✊', '👊', '👋', '😠',
             '👏', '👐', '✍', '👦', '👧', '👨', '👩', '👴', '👵', '👶', '👱', '👮', '👲', '👳', '👷', '👸', '💂', '🎅',
             '👰', '👼', '💆', '💇', '🙍', '🙎', '🙅', '🙆', '💁', '🙋', '🙇', '🙌', '🙏', '👤', '🚶', '🏃', '👯', '👶',
             '😀', '😁', '😂', '😃', '😄', '😅', '😆', '😉', '😊', '😋', '😎', '😨', '😬', '😰', '😱', '😳', '😵', '😡',
             '😍', '😘', '😗', '😙', '😚', '☺', '😇', '😐', '😑', '😶', '😏', '😣', '😥', '😮', '😯', '😪', '😫', '😴',
             '😌', '😛', '😜', '😝', '😒', '😓', '😔', '😕', '😲', '😷', '😖', '😞', '😟', '😤', '😢', '😭', '😦', '😧']
        return c

    def discover_1(self):
        # 通用文章
        a = ["开始以为是青铜，没想到是个王者", "同样是腰间盘，为何你如此凸出", "通读文章，感慨万千", "我连墙都不扶，就服你。", "老师讲的太好了", "太厉害了", "说的真好，这世上之事大抵如此吧！",
             "我一口气看完了你的所有文章，太精彩了！", "太长了不想看", "在座的各位能在这相遇就不用我多说了吧", "我是一个路人", "就这？", "不明觉厉", "不会只有我才知道这位老师多么优秀吧？",
             "赞啊！",
             "越来越没有自知之明了，这种文章我也敢点进来看了", "种草", "精彩", "女少口阿", "看到标题的一刹那，就有种腿软的感觉", "角度新奇，立意独特", "比喻贴切，用词生动", "贴近生活，倍感亲切",
             "细节描写别具匠心，细致入微", "很打动我，感同身受", "期待下次的内容", "有些晦涩难懂", "感觉有些沉重了", "我喜欢这篇文章传达的东西", "能写出此篇文章的作者，内心一定饱满坚强",
             "读起来有点困难，可能是我理解力不够"]
        return a

    def discover_2(self):
        # 通用音频
        a = ["每天就靠这个睡觉啦", "清晨听一听还是很有趣的", "声音真的很好听", "我很喜欢这个声音", "声音蛮温柔的", "听起来好像我以前的一个朋友", "很安心", "很有意义的一段声音",
             "爱上这个声音了", "我是声控你造嘛", "声音很清脆", "听着有点不舒服", "声音一般般吧", "我想让这个声音每天叫我起床！", "每天不听这个睡不着觉", "这是我听过最好的", "一段心灵的声音",
             "听起来很舒服", "很有教育意义", "通俗易懂的解读方式，很棒", "轻松愉快的氛围，不错", "有些沉重了", "有内味了", "哇，绝了", "妙不可言", "声音的表达往往比文字更好",
             "如果有视频版本就好啦", "声音比文字更有情感", "个人觉得用文字表达更有想象力一些"]
        return a

    def discover_3(self):
        # 通用视频
        a = ["很有教育意义", "可以提升自己", "这个内容我很喜欢", "哈哈哈，太有意思了", "蛮活泼的", "嘻嘻嘻", "666啊", "这个视频我很喜欢看，我要分享给别人", "我刚分享给我朋友，太好看了",
             "啥破玩意，无聊", "太没意思了，这视频真的没劲", "我朋友看过了让我过来点个赞，哈哈哈", "愣着干嘛，点赞啊！", "蛮不错的", "辛苦做视频的小伙伴了",
             "越来越没有自知之明了，这种视频我也敢点进来看了", "角度奇特，内容新奇", "这视频标题谁起的，出来挨打", "有种共鸣的感觉", "每次看完你的视频都很开心", "进我的收藏夹里面吃灰吧",
             "期待下次视频的更新", "我喜欢这个封面", "感觉没看懂呢", "看哭了，手机砸在脸上哭的", "好看的皮囊千篇一律，有趣的灵魂200多斤", "如果能现场看到就更好了", "生动有趣，活泼自如",
             "标题党？", "感觉有点音画不同步？"]
        return a

    # discover_type: 发现类型      kol_tpye: 大咖类型
    def if_erse(self, discover_type, kol_tpye, ):
        # 这里只是返回一个合并的评论列表,x预留给文本发现的文本内容
        t = []
        dict1 = {1: self.type_1(), 2: self.type_2(), 3: self.type_3(), 4: self.type_4(), 5: self.type_5(),
                 6: self.type_6(), 7: self.type_7(), 8: self.type_8(), 9: self.type_9(), 10: self.type_10()}
        if len(kol_tpye) > 1:
            for i in range(len(kol_tpye)):
                if kol_tpye[i] in dict1:
                    t += dict1[kol_tpye[i]]
                else:
                    print("新增的大咖类型无评论")
            t += self.type()
        elif len(kol_tpye) == 1:
            if kol_tpye[0] in dict1:
                t += dict1[kol_tpye[0]]
            else:
                print("新增的大咖类型无评论")
            t += self.type()
        else:
            t += self.type()

        dict2 = {0: self.discover_1(), 1: self.discover_1(), 2: self.discover_2(), 3: self.discover_3()}
        if discover_type in dict2:
            t += dict2[discover_type]
        else:
            print("还有其他的类型? 肯定是出错了")
        return t

    # x: 发现类型       b: 大咖类型       # C: 发现文本字段
    def test(self, x, b, C):
        if 1 > random.randint(0, 9):
            # 设定1概率通用评论
            a = number(self.type())
        else:
            a = number(self.if_erse(x, b) + C)
        return a

    def if_contain_symbol(self, keyword):
        # keyword = re.sub(r" |\s", "", keyword)
        if keyword == "" or keyword == "/":
            return number(self.type())
        if re.search(r"\W", keyword[-1]):
            if 2 > random.randint(0, 20):
                keyword = keyword + number(self.type2())
            elif 19 < random.randint(0, 20):
                keyword = number(self.type2()) + keyword
            return keyword
        else:
            if 4 > random.randint(0, 15):
                s = keyword + number(self.type1())
                if 2 > random.randint(0, 15):
                    s = s + number(self.type2())
                elif 14 < random.randint(0, 15):
                    s = number(self.type2()) + s
                return s
            else:
                if 3 > random.randint(0, 15):
                    keyword = keyword + number(self.type2())
                return keyword


# if __name__ == "__main__":
#     a = comment()
#     b = a.if_contain_symbol("/")
#     print(b)
#     name = ["周玄毅", "周老师"]
#     j = ["666", "说的好"]
#     kol_tpye = [2, 5]
#     e = 1
#     discover_id = 2
#     s = a.test(kol_tpye, discover_id)
#     print(s)
#     print(a.if_contain_symbol(s))
